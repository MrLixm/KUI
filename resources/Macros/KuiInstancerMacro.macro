<katana release="4.5v1" version="4.5.1.000008">
  <node name="__SAVE_exportedNodes" type="Group">
    <node baseType="CustomNode" name="KuiInstancer" ns_basicDisplay="1" ns_colorb="0.28" ns_colorg="0.41" ns_colorr="0.46" ns_fromContext="legacy" ns_iconName="" type="KuiInstancer" x="0" y="0">
      <port name="in" type="in"/>
      <port name="out" type="out"/>
      <group_parameter name="KuiInstancer">
        <group_parameter hints="{&apos;hideTitle&apos;: True}" name="user">
          <string_parameter hints="{&apos;help&apos;: &apos;&lt;p&gt;For hierarchical, 3 tokens are available :&lt;/p&gt;\n&lt;ul dir=&quot;auto&quot;&gt;\n&lt;li&gt;&lt;code&gt;$id&lt;/code&gt; &lt;em&gt;(mandatory)&lt;/em&gt;: replaced by point number\n&lt;ul dir=&quot;auto&quot;&gt;\n&lt;li&gt;can be suffixed by a number to add a digit padding, ex: &lt;code&gt;$id3&lt;/code&gt; can give &lt;code&gt;008&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$sourcename&lt;/code&gt; : basename of the instance source location used&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$sourceindex&lt;/code&gt; : index attribute that was used to determine the instance source to pick.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;For &lt;code&gt;array&lt;/code&gt; method this is just the basename of the single instance location.&lt;/p&gt;&apos;}" name="instance_name" value="instances"/>
          <string_parameter hints="{&apos;widget&apos;: &apos;scenegraphLocation&apos;, &apos;help&apos;: &apos;&quot;Group&quot;/ target location where the instance(s) must be created. (doesn\&apos;t need to exist).&apos;}" name="instance_location" value="/root/world/geo"/>
          <string_parameter hints="{&apos;widget&apos;: &apos;scenegraphLocation&apos;}" name="pointcloud" value="/root/world/geo"/>
          <number_parameter hints="{&apos;widget&apos;: &apos;mapper&apos;, &apos;options&apos;: {&apos;array&apos;: 1.0, &apos;hierarchical&apos;: 0.0}}" name="method" value="1"/>
          <string_parameter hints="{&apos;widget&apos;: &apos;popup&apos;, &apos;help&apos;: &apos;&lt;p&gt;You better use the &lt;code&gt;debug&lt;/code&gt; level ONLY if you have very few amounts of points (&amp;lt; 100) else you might see your console flooded with very long messages.&lt;/p&gt;&apos;, &apos;options&apos;: [&apos;DEBUG&apos;, &apos;INFO&apos;, &apos;WARNING&apos;]}" name="log_level" value="INFO"/>
          <group_parameter hints="{&apos;label&apos;: &apos;&apos;}" name="Data">
            <string_parameter expression="&quot;{}/{}&quot;.format(user.instance_location, str(user.instance_name).replace(&quot;$id&quot;, &quot;0&quot;).replace(&quot;$sourcename&quot;, &quot;&quot;).replace(&quot;$sourceindex&quot;, &quot;&quot;))" name="array_name"/>
          </group_parameter>
          <group_parameter name="About">
            <string_parameter hints="{&apos;readOnly&apos;: True}" name="name" value="KuiInstancer"/>
            <string_parameter hints="{&apos;readOnly&apos;: True}" name="version" value="0.1.0"/>
            <string_parameter hints="{&apos;readOnly&apos;: True, &apos;widget&apos;: &apos;null&apos;}" name="api_version" value="1.1.5"/>
            <string_parameter hints="{&apos;readOnly&apos;: True}" name="info" value="Part of KUI. This node hold the &quot;instancing&quot; part OpScript that requires the pointcloud source to be configured in a defined way."/>
            <string_parameter hints="{&apos;readOnly&apos;: True}" name="author" value="&lt;Liam Collod monsieurlixm@gmail.com&gt;"/>
            <string_parameter hints="{&apos;readOnly&apos;: True, &apos;widget&apos;: &apos;null&apos;}" name="path" value="Z:\packages-dev\KUI\resources\CustomNodes\kuiinstancer.pyc"/>
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptButton&apos;, &apos;scriptText&apos;: &apos;\nimport os.path\nimport webbrowser\n\ndoc_path = None\n\n# first try to get the path on the python class\ntry:\n    doc_path = node.documentation\nexcept:\n    pass\n\nif not doc_path:\n\n    tool_path = parameter.getParent().getChild(&quot;path&quot;).getValue(0)\n    doc_path = os.path.splitext(tool_path)[0] + &quot;.md&quot;\n    if not os.path.exists(doc_path):\n        doc_path = None\n\nif doc_path:\n    webbrowser.open(doc_path)\n&apos;}" name="open_documentation" value="&#0010;import os.path&#0010;import webbrowser&#0010;&#0010;doc_path = None&#0010;&#0010;# first try to get the path on the python class&#0010;try:&#0010;    doc_path = node.documentation&#0010;except:&#0010;    pass&#0010;&#0010;if not doc_path:&#0010;&#0010;    tool_path = parameter.getParent().getChild(&quot;path&quot;).getValue(0)&#0010;    doc_path = os.path.splitext(tool_path)[0] + &quot;.md&quot;&#0010;    if not os.path.exists(doc_path):&#0010;        doc_path = None&#0010;&#0010;if doc_path:&#0010;    webbrowser.open(doc_path)&#0010;"/>
          </group_parameter>
        </group_parameter>
      </group_parameter>
      <node baseType="Dot" name="In_KuiInstancer_0001" type="Dot" x="0" y="150">
        <port name="input" source="KuiInstancer.in" type="in"/>
        <port name="output" type="out"/>
        <group_parameter name="In_KuiInstancer_0001"/>
      </node>
      <node baseType="Dot" name="Out_KuiInstancer_0001" type="Dot" x="0" y="-600">
        <port name="input" source="SwitchMethod_kui0001.output" type="in"/>
        <port name="output" returns="out" type="out"/>
        <group_parameter name="Out_KuiInstancer_0001"/>
      </node>
      <node baseType="Dot" name="Dot_kui0001" type="Dot" x="0" y="-100">
        <port name="input" source="In_KuiInstancer_0001.output" type="in"/>
        <port name="output" type="out"/>
        <group_parameter name="Dot_kui0001"/>
      </node>
      <node baseType="OpScript" name="OpScript_hiera_kui0001" type="OpScript" x="-100" y="-100">
        <port name="i0" source="Dot_kui0001.output" type="in"/>
        <port name="out" type="out"/>
        <group_parameter name="OpScript_hiera_kui0001">
          <string_parameter name="CEL" value=""/>
          <string_parameter expression="=^/user.instance_location" name="location"/>
          <group_parameter name="script">
            <string_parameter name="lua" value="--[[&#0010;version=3&#0010;&#0010;[LICENSE]&#0010;&#0010;Copyright 2022 Liam Collod&#0010;&#0010;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#0010;you may not use this file except in compliance with the License.&#0010;You may obtain a copy of the License at&#0010;&#0010;   http://www.apache.org/licenses/LICENSE-2.0&#0010;&#0010;Unless required by applicable law or agreed to in writing, software&#0010;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#0010;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#0010;See the License for the specific language governing permissions and&#0010;limitations under the License.&#0010;]]&#0010;local hier = require(&quot;kui.hierarchical&quot;)&#0010;-- don&apos;t print/log anything here, repeated times number of points.&#0010;local utils = require(&quot;kui.utils&quot;)&#0010;local logging = require(&quot;lllogger&quot;)&#0010;&#0010;&#0010;if Interface.AtRoot() then&#0010;  local log_level = utils.get_user_attr(&quot;log_level&quot;, {&quot;INFO&quot;})[1]&#0010;  logging.getLogger(&quot;kui.hierarchical&quot;):setLevel(logging.LEVELS[log_level])&#0010;  hier.run_root()&#0010;&#0010;else&#0010;  -- don&apos;t print/log anything here too, repeated times number of points.&#0010;  hier.run_not_root()&#0010;end"/>
          </group_parameter>
          <string_parameter name="executionMode" value="immediate"/>
          <string_parameter name="applyWhere" value="at specific location"/>
          <string_parameter name="applyWhen" value="during op resolve"/>
          <string_parameter name="modifierNameMode" value="node name"/>
          <string_parameter name="modifierName" value="modifier"/>
          <string_parameter name="resolveIds" value=""/>
          <number_parameter name="recursiveEnable" value="0"/>
          <string_parameter name="disableAt" value=""/>
          <string_parameter name="inputBehavior" value="by index"/>
          <number_parameter name="multisampleUserOpArgs" value="1"/>
          <group_parameter name="user">
            <string_parameter expression="=^/user.pointcloud" name="pointcloud_sg"/>
            <string_parameter expression="=^/user.instance_name" name="instance_name"/>
            <string_parameter expression="=^/user.log_level" name="log_level"/>
          </group_parameter>
        </group_parameter>
      </node>
      <node baseType="OpScript" name="OpScript_array_kui0001" type="OpScript" x="100" y="-100">
        <port name="i0" source="Dot_kui0001.output" type="in"/>
        <port name="out" type="out"/>
        <group_parameter name="OpScript_array_kui0001">
          <string_parameter name="CEL" value=""/>
          <string_parameter expression="=^/user.Data.array_name" name="location"/>
          <group_parameter name="script">
            <string_parameter name="lua" value="--[[&#0010;version=3&#0010;&#0010;[LICENSE]&#0010;&#0010;Copyright 2022 Liam Collod&#0010;&#0010;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#0010;you may not use this file except in compliance with the License.&#0010;You may obtain a copy of the License at&#0010;&#0010;   http://www.apache.org/licenses/LICENSE-2.0&#0010;&#0010;Unless required by applicable law or agreed to in writing, software&#0010;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#0010;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#0010;See the License for the specific language governing permissions and&#0010;limitations under the License.&#0010;]]&#0010;local array = require(&quot;kui.array&quot;)&#0010;local utils = require(&quot;kui.utils&quot;)&#0010;local logging = require(&quot;lllogger&quot;)&#0010;&#0010;local log_level = utils.get_user_attr(&quot;log_level&quot;, {&quot;INFO&quot;})[1]&#0010;logging.getLogger(&quot;kui.array&quot;):setLevel(logging.LEVELS[log_level])&#0010;&#0010;array.run()&#0010;"/>
          </group_parameter>
          <string_parameter name="executionMode" value="immediate"/>
          <string_parameter name="applyWhere" value="at specific location"/>
          <string_parameter name="applyWhen" value="during op resolve"/>
          <string_parameter name="modifierNameMode" value="node name"/>
          <string_parameter name="modifierName" value="modifier"/>
          <string_parameter name="resolveIds" value=""/>
          <number_parameter name="recursiveEnable" value="0"/>
          <string_parameter name="disableAt" value=""/>
          <string_parameter name="inputBehavior" value="by index"/>
          <number_parameter name="multisampleUserOpArgs" value="1"/>
          <group_parameter name="user">
            <string_parameter expression="=^/user.pointcloud" name="pointcloud_sg"/>
            <string_parameter expression="=^/user.log_level" name="log_level"/>
          </group_parameter>
        </group_parameter>
      </node>
      <node baseType="Switch" name="SwitchMethod_kui0001" type="Switch" x="0" y="-350">
        <port name="hiera" source="OpScript_hiera_kui0001.out" type="in"/>
        <port name="array" source="OpScript_array_kui0001.out" type="in"/>
        <port name="output" type="out"/>
        <group_parameter name="SwitchMethod_kui0001">
          <number_parameter expression="=^/user.method" isexpression="true" name="in"/>
        </group_parameter>
      </node>
    </node>
  </node>
</katana>
