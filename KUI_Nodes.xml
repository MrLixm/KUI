<katana release="4.5v1" version="4.5.1.000008">
  <node name="__SAVE_exportedNodes" type="Group">
    <node baseType="Group" eyepointx="-1325.34" eyepointy="-1050.32" eyepointz="0.0" name="KUIInstancer_0001" ns_basicDisplay="1.0" ns_errorGlow="0.0" ns_fromContext="legacy" ns_iconName="" ns_viewState="2.0" selected="true" type="Group" viewscalex="1.0" viewscaley="1.0" viewscalez="1.0" x="-2656" y="352">
      <port name="i0" type="in"/>
      <port name="o0" type="out"/>
      <group_parameter name="KUIInstancer_0001">
        <group_parameter hints="{&apos;hideTitle&apos;: &apos;True&apos;}" name="user">
          <string_parameter hints="{&apos;help&apos;: &apos;&lt;p&gt;For hierarchical, 3 tokens are available :&lt;/p&gt;\n&lt;ul dir=&quot;auto&quot;&gt;\n&lt;li&gt;&lt;code&gt;$id&lt;/code&gt; &lt;em&gt;(mandatory)&lt;/em&gt;: replaced by point number\n&lt;ul dir=&quot;auto&quot;&gt;\n&lt;li&gt;can be suffixed by a number to add a digit padding, ex: &lt;code&gt;$id3&lt;/code&gt; can give &lt;code&gt;008&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$sourcename&lt;/code&gt; : basename of the instance source location used&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;$sourceindex&lt;/code&gt; : index attribute that was used to determine the instance source to pick.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;For &lt;code&gt;array&lt;/code&gt; method this is just the basename of the single instance location.&lt;/p&gt;&apos;}" name="instance_name" value="instance_$id_$sourcename"/>
          <string_parameter hints="{&apos;widget&apos;: &apos;scenegraphLocation&apos;, &apos;help&apos;: &apos;&quot;Group&quot;/ target location where the instance(s) must be created. (doesn\&apos;t need to exist).\n&apos;}" name="instance_location" value="/root/world/instancing/outputA"/>
          <string_parameter hints="{&apos;widget&apos;: &apos;scenegraphLocation&apos;}" name="pointcloud" value="/root/world/geo/asset/pointcloud/pointcloudShape"/>
          <number_parameter hints="{&apos;options__order&apos;: [&apos;hierarchical&apos;, &apos;array&apos;], &apos;help&apos;: &apos;&lt;p&gt;Hierarchical = one location for each instance&lt;br /&gt;Array = one location for &lt;strong&gt;all&lt;/strong&gt; instances&lt;/p&gt;\n&lt;p&gt;Hierarchical is not recommended to be used &amp;gt;50k instances as you will start to experience exponentialy slowing pre-render time.&lt;/p&gt;&apos;, &apos;widget&apos;: &apos;mapper&apos;, &apos;options&apos;: {&apos;array&apos;: 1.0, &apos;hierarchical&apos;: 0.0}}" name="method" value="0"/>
          <string_parameter hints="{&apos;widget&apos;: &apos;popup&apos;, &apos;options&apos;: [&apos;debug&apos;, &apos;info&apos;, &apos;warning&apos;], &apos;help&apos;: &apos;&lt;p&gt;You better use the &lt;code&gt;debug&lt;/code&gt; level ONLY if you have very few amounts of points (&amp;lt; 100) else you might see your console flooded with very long messages.&lt;/p&gt;&apos;}" name="log_level" value="info"/>
          <group_parameter name="about">
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptButton&apos;, &apos;buttonText&apos;: &apos;Open Documentation&apos;, &apos;scriptText&apos;: &apos;import webbrowser\nwebbrowser.open(&quot;https://github.com/MrLixm/KUI&quot;)&apos;}" name="open_documentation" value=""/>
            <number_parameter name="version_" value="2"/>
            <string_parameter name="author_" value="Liam Collod"/>
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptEditor&apos;}" name="info_" value="KUI is a lua package made for flexible and easy instancing.&#0010;&#0010;This node hold the &quot;instancing&quot; part OpScript but require the pointcloud source to be configured in a defined way."/>
          </group_parameter>
          <group_parameter hints="{&apos;label&apos;: &apos;&apos;}" name="Data">
            <string_parameter expression="&quot;{}/{}&quot;.format(&#0010;user.instance_location,&#0010;str(user.instance_name).replace(&quot;$id&quot;, &quot;0&quot;).replace(&quot;$sourcename&quot;, &quot;&quot;).replace(&quot;$sourceindex&quot;, &quot;&quot;)&#0010;)" name="array_name"/>
          </group_parameter>
        </group_parameter>
      </group_parameter>
      <node baseType="OpScript" name="OpScript_hier_kuii0001" ns_errorGlow="0.0" ns_viewState="2.0" type="OpScript" x="-1472.0" y="-960.0">
        <port name="i0" source="Dot4.output" type="in"/>
        <port name="out" type="out"/>
        <group_parameter name="OpScript_hier_kuii0001">
          <string_parameter name="CEL" value="(( /root/world/geo/output))"/>
          <string_parameter expression="=^/user.instance_location" name="location"/>
          <group_parameter name="script">
            <string_parameter name="lua" value="--[[&#0010;version=2&#0010;&#0010;[LICENSE]&#0010;&#0010;Copyright 2022 Liam Collod&#0010;&#0010;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#0010;you may not use this file except in compliance with the License.&#0010;You may obtain a copy of the License at&#0010;&#0010;   http://www.apache.org/licenses/LICENSE-2.0&#0010;&#0010;Unless required by applicable law or agreed to in writing, software&#0010;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#0010;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#0010;See the License for the specific language governing permissions and&#0010;limitations under the License.&#0010;]]&#0010;local hier = require(&quot;kui.hierarchical&quot;)&#0010;local utils = require(&quot;kui.utils&quot;)&#0010;-- don&apos;t print/log anything here, repeated times number of points.&#0010;&#0010;if Interface.AtRoot() then&#0010;  local log_level = utils:get_user_attr(Interface.GetCurrentTime(), &quot;log_level&quot;, &quot;info&quot;)[1]&#0010;  hier:set_logger_level(log_level)&#0010;  hier:run_root()&#0010;&#0010;else&#0010;  -- don&apos;t print/log anything here too, repeated times number of points.&#0010;  hier:run_not_root()&#0010;end"/>
          </group_parameter>
          <string_parameter name="executionMode" value="immediate"/>
          <string_parameter name="applyWhere" value="at specific location"/>
          <string_parameter name="applyWhen" value="during op resolve"/>
          <string_parameter name="modifierNameMode" value="node name"/>
          <string_parameter name="modifierName" value="modifier"/>
          <string_parameter name="resolveIds" value=""/>
          <number_parameter name="recursiveEnable" value="0"/>
          <string_parameter name="disableAt" value=""/>
          <string_parameter name="inputBehavior" value="by index"/>
          <number_parameter name="multisampleUserOpArgs" value="1"/>
          <group_parameter hints="{}" name="user">
            <string_parameter expression="=^/user.pointcloud" hints="{&apos;widget&apos;: &apos;scenegraphLocation&apos;}" name="pointcloud_sg"/>
            <string_parameter expression="=^/user.instance_name" name="instance_name"/>
            <string_parameter expression="=^/user.log_level" name="log_level"/>
          </group_parameter>
        </group_parameter>
      </node>
      <node baseType="Dot" name="out_kuii0001" ns_basicDisplay="1.0" ns_colorb="0.01" ns_colorg="0.01" ns_colorr="0.01" ns_errorGlow="0.0" ns_viewState="2.0" type="Dot" x="-1312.0" y="-1232.0">
        <port name="input" source="SwitchMethod_kuii0001.output" type="in"/>
        <port name="output" returns="o0" type="out"/>
        <group_parameter name="out_kuii0001"/>
      </node>
      <node baseType="Dot" name="in_kuii0001" ns_basicDisplay="1.0" ns_colorb="0.01" ns_colorg="0.01" ns_colorr="0.01" ns_errorGlow="0.0" ns_viewState="2.0" type="Dot" x="-1312.0" y="-736.0">
        <port name="input" source="KUIInstancer_0001.i0" type="in"/>
        <port name="output" type="out"/>
        <group_parameter name="in_kuii0001"/>
      </node>
      <node baseType="Switch" name="SwitchMethod_kuii0001" ns_viewState="2.0" type="Switch" x="-1312.0" y="-1072.0">
        <port name="i0" source="OpScript_hier_kuii0001.out" type="in"/>
        <port name="i1" source="OpScript_array_kuii0001.out" type="in"/>
        <port name="output" type="out"/>
        <group_parameter name="SwitchMethod_kuii0001">
          <number_parameter expression="=^/user.method" isexpression="true" name="in"/>
        </group_parameter>
      </node>
      <node baseType="Dot" name="Dot4" ns_viewState="2.0" type="Dot" x="-1312.0" y="-848.0">
        <port name="input" source="in_kuii0001.output" type="in"/>
        <port name="output" type="out"/>
        <group_parameter name="Dot4"/>
      </node>
      <node baseType="OpScript" name="OpScript_array_kuii0001" ns_errorGlow="0.0" ns_viewState="2.0" type="OpScript" x="-1152.0" y="-960.0">
        <port name="i0" source="Dot4.output" type="in"/>
        <port name="out" type="out"/>
        <group_parameter name="OpScript_array_kuii0001">
          <string_parameter name="CEL" value="(( /root/world/geo/output))"/>
          <string_parameter expression="=^/user.Data.array_name" name="location"/>
          <group_parameter name="script">
            <string_parameter name="lua" value="--[[&#0010;version=2&#0010;&#0010;[LICENSE]&#0010;&#0010;Copyright 2022 Liam Collod&#0010;&#0010;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#0010;you may not use this file except in compliance with the License.&#0010;You may obtain a copy of the License at&#0010;&#0010;   http://www.apache.org/licenses/LICENSE-2.0&#0010;&#0010;Unless required by applicable law or agreed to in writing, software&#0010;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#0010;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#0010;See the License for the specific language governing permissions and&#0010;limitations under the License.&#0010;]]&#0010;local array = require(&quot;kui.array&quot;)&#0010;local utils = require(&quot;kui.utils&quot;)&#0010;&#0010;local log_level = utils:get_user_attr(Interface.GetCurrentTime(), &quot;log_level&quot;, &quot;info&quot;)[1]&#0010;array:set_logger_level(log_level)&#0010;array:run()&#0010;"/>
          </group_parameter>
          <string_parameter name="executionMode" value="immediate"/>
          <string_parameter name="applyWhere" value="at specific location"/>
          <string_parameter name="applyWhen" value="during op resolve"/>
          <string_parameter name="modifierNameMode" value="node name"/>
          <string_parameter name="modifierName" value="modifier"/>
          <string_parameter name="resolveIds" value=""/>
          <number_parameter name="recursiveEnable" value="0"/>
          <string_parameter name="disableAt" value=""/>
          <string_parameter name="inputBehavior" value="by index"/>
          <number_parameter name="multisampleUserOpArgs" value="1"/>
          <group_parameter hints="{}" name="user">
            <string_parameter expression="=^/user.pointcloud" hints="{&apos;widget&apos;: &apos;scenegraphLocation&apos;}" name="pointcloud_sg"/>
            <string_parameter expression="=^/user.log_level" name="log_level"/>
          </group_parameter>
        </group_parameter>
      </node>
    </node>
    <node baseType="Group" eyepointx="-1461.31" eyepointy="739.438" eyepointz="0.0" name="KUISetup_0001" ns_basicDisplay="1.0" ns_errorGlow="0.0" ns_fromContext="legacy" ns_iconName="" ns_viewState="2.0" selected="true" type="Group" viewscalex="1.0" viewscaley="1.0" viewscalez="1.0" x="-2656" y="496">
      <port name="i0" type="in"/>
      <port name="o0" type="out"/>
      <group_parameter name="KUISetup_0001">
        <group_parameter hints="{&apos;hideTitle&apos;: &apos;True&apos;}" name="user">
          <string_parameter hints="{&apos;widget&apos;: &apos;scenegraphLocation&apos;}" name="pointcloud" value="/root/world/geo/asset/pointcloud/pointcloudShape"/>
          <group_parameter hints="{}" name="display">
            <number_parameter name="point_width" value="1"/>
            <number_parameter hints="{&apos;widget&apos;: &apos;boolean&apos;}" name="visible_in_render" value="0"/>
          </group_parameter>
          <group_parameter hints="{}" name="settings">
            <number_parameter hints="{&apos;widget&apos;: &apos;mapper&apos;, &apos;options__order&apos;: [&apos;disable&apos;, &apos;degree2radian&apos;, &apos;radian2degree&apos;], &apos;help&apos;: &apos;Applied on all rotations attributes.\n&lt;br&gt;\nHappens after the initial values have been multiplied/offseted.&apos;, &apos;options&apos;: {&apos;degree2radian&apos;: 1.0, &apos;radian2degree&apos;: -1.0, &apos;disable&apos;: 0.0}, &apos;label&apos;: &apos;Degree to Radian Conversion&apos;}" name="convert_degree_to_radian" value="0"/>
            <number_parameter hints="{&apos;widget&apos;: &apos;boolean&apos;, &apos;helpAlert&apos;: &apos;warning&apos;, &apos;help&apos;: &apos;If enabled, the translation, rotationX/Y/Z and scale attributes are converted to a 4x4 identity matrix (the matrix attribute.). Make sure at least one of the TRS attribute is specified.\n&lt;br&gt;\n&lt;br&gt;\nThe rotations values are excepted to be degree.\n&lt;br&gt;\n&lt;br&gt;\n\xe2\x9a\xa0 This feature requires Katana 4.0 +&apos;, &apos;label&apos;: &apos;TRS to Matrix Conversion&apos;}" name="convert_trs_to_matrix" value="0"/>
          </group_parameter>
          <group_parameter hints="{&apos;label&apos;: &apos;#sources&apos;}" name="sources">
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptButton&apos;, &apos;buttonText&apos;: &apos;Add New Row&apos;, &apos;scriptText&apos;: &apos;&quot;&quot;&quot;\nversion=2\nPython 2+\n\nThis snippet is used on KUI Setup node ScriptButtons parameters.\nThe script is modulated based on the name of the parameter.\n&quot;&quot;&quot;\nfrom Katana import (\n    KatanaFile,\n    NodegraphAPI,\n    UI4,\n    Utils,\n)\n\nFRAME = NodegraphAPI.GetCurrentTime()\n\n\ndef get_data(sourcenode, path):\n\n    teleparam = sourcenode.getParameter(path)\n    teleparam_value = teleparam.getValue(FRAME)  # &quot;nodeName.paramName&quot;\n\n    asnode, asparam = teleparam_value.split(&quot;.&quot;, 1)\n    asnode = NodegraphAPI.GetNode(asnode)\n    asparam = asnode.getParameter(asparam)  # string array parameter\n\n    # get current parameter structure\n    array_size = asparam.getNumChildren()\n    tuple_size = asparam.getTupleSize()\n\n    return {\n        &quot;node&quot;: asnode,\n        &quot;param&quot;: asparam,\n        &quot;array&quot;: array_size,\n        &quot;tuple&quot;: tuple_size\n    }\n\n\ndef update_node(node2update, logger):\n    &quot;&quot;&quot;\n    Because I didn\&apos;t find any way to force an UI refresh of a node parameter\n    we will &quot;cut and paste&quot; the node to kind of force refresh it.\n    &quot;&quot;&quot;\n\n    # Get the original node and gather all the data we need for copy\n    NodegraphAPI.SetAllSelectedNodes([node2update])\n    source_node, parent_node = NodegraphAPI.GetAllSelectedNodesAndParent()\n    katana_xml = NodegraphAPI.BuildNodesXmlIO(\n        source_node,\n        forcePersistant=True\n    )\n    source_node = source_node[0]  # type: NodegraphAPI.Node\n    sn_pos = NodegraphAPI.GetNodePosition(source_node)  # type: tuple\n    sn_port_in = source_node.getInputPortByIndex(0)  # type: NodegraphAPI.Port\n    sn_port_in = sn_port_in.getConnectedPort(0)  # type: NodegraphAPI.Port\n    sn_port_out_list = source_node.getOutputPortByIndex(0)  # type: NodegraphAPI.Port\n    sn_port_out_list = sn_port_out_list.getConnectedPorts()  # type:list\n\n    # We delete the previous node before creating the new one\n    source_node.delete()\n    del source_node\n    Utils.EventModule.ProcessEvents()  # make sure the delete is processed\n\n    # Now create the new node\n    new_node = KatanaFile.Paste(katana_xml, parent_node)  # type: list\n    new_node = new_node[0]  # type: NodegraphAPI.Node\n    NodegraphAPI.SetNodePosition(new_node, sn_pos)\n    sn_port_in.connect(new_node.getInputPortByIndex(0))\n    for port in sn_port_out_list:\n        port.connect(new_node.getOutputPortByIndex(0))\n\n    NodegraphAPI.SetNodeEdited(new_node, True, exclusive=True)\n    print(\n        &quot;[ButtonScript][{}][update_node] Finished.\\n&quot;\n        &quot;Previous node was deleted and replace by the new node &lt;{}&gt;.&quot;\n        &quot;&quot;.format(logger, new_node)\n    )\n    return\n\n\ndef run():\n    &quot;&quot;&quot;\n    This function runs for all buttons.\n    &quot;&quot;&quot;\n\n    parameter = parameter  # type: NodegraphAPI.Parameter\n    node = node  # type: NodegraphAPI.Node\n\n    # ex: parameter.getName() = &quot;add_row_arbitrary&quot;\n    context = parameter.getName().rsplit(&quot;_&quot;, 1)[-1]\n    op = parameter.getName().rsplit(&quot;_&quot;, 1)[0]\n    name = &quot;KUIs.{}.{}&quot;.format(context, op)\n\n    data = get_data(node, &quot;user.{}.array&quot;.format(context))\n    param = data[&quot;param&quot;]\n    array_size = data[&quot;array&quot;]\n    tuple_size = data[&quot;tuple&quot;]\n\n    if op == &quot;add_row&quot;:\n\n        param.resizeArray(array_size + tuple_size)\n\n        if context == &quot;sources&quot;:\n            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE LOCATION&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(&quot;SOURCE INDEX&quot;, FRAME)\n\n        elif context == &quot;common&quot;:\n            tokenparam = node.getParameter(&quot;user.common.token2add&quot;)\n            tokenparam_value = tokenparam.getValue(FRAME)  # type: str\n            param.getChildByIndex(array_size + 0).setValue(&quot;ATTRIBUTE&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(tokenparam_value, FRAME)\n            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)\n            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)\n            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)\n\n        elif context == &quot;arbitrary&quot;:\n            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(&quot;TARGET&quot;, FRAME)\n            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)\n            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)\n            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)\n            param.getChildByIndex(array_size + 5).setValue(&quot;&quot;, FRAME)\n\n    elif op == &quot;remove_row&quot;:\n        param.resizeArray(array_size - tuple_size)\n\n    # this is executed no matter what button the user clicked\n    update_node(node, name)\n\n    print(&quot;[ScriptButton][{}][run] Finished.&quot;.format(name))\n    return\n\n\nrun()\n&apos;}" name="add_row_sources" value=""/>
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptButton&apos;, &apos;buttonText&apos;: &apos;Remove Last Row&apos;, &apos;scriptText&apos;: &apos;&quot;&quot;&quot;\nversion=2\nPython 2+\n\nThis snippet is used on KUI Setup node ScriptButtons parameters.\nThe script is modulated based on the name of the parameter.\n&quot;&quot;&quot;\nfrom Katana import (\n    KatanaFile,\n    NodegraphAPI,\n    UI4,\n    Utils,\n)\n\nFRAME = NodegraphAPI.GetCurrentTime()\n\n\ndef get_data(sourcenode, path):\n\n    teleparam = sourcenode.getParameter(path)\n    teleparam_value = teleparam.getValue(FRAME)  # &quot;nodeName.paramName&quot;\n\n    asnode, asparam = teleparam_value.split(&quot;.&quot;, 1)\n    asnode = NodegraphAPI.GetNode(asnode)\n    asparam = asnode.getParameter(asparam)  # string array parameter\n\n    # get current parameter structure\n    array_size = asparam.getNumChildren()\n    tuple_size = asparam.getTupleSize()\n\n    return {\n        &quot;node&quot;: asnode,\n        &quot;param&quot;: asparam,\n        &quot;array&quot;: array_size,\n        &quot;tuple&quot;: tuple_size\n    }\n\n\ndef update_node(node2update, logger):\n    &quot;&quot;&quot;\n    Because I didn\&apos;t find any way to force an UI refresh of a node parameter\n    we will &quot;cut and paste&quot; the node to kind of force refresh it.\n    &quot;&quot;&quot;\n\n    # Get the original node and gather all the data we need for copy\n    NodegraphAPI.SetAllSelectedNodes([node2update])\n    source_node, parent_node = NodegraphAPI.GetAllSelectedNodesAndParent()\n    katana_xml = NodegraphAPI.BuildNodesXmlIO(\n        source_node,\n        forcePersistant=True\n    )\n    source_node = source_node[0]  # type: NodegraphAPI.Node\n    sn_pos = NodegraphAPI.GetNodePosition(source_node)  # type: tuple\n    sn_port_in = source_node.getInputPortByIndex(0)  # type: NodegraphAPI.Port\n    sn_port_in = sn_port_in.getConnectedPort(0)  # type: NodegraphAPI.Port\n    sn_port_out_list = source_node.getOutputPortByIndex(0)  # type: NodegraphAPI.Port\n    sn_port_out_list = sn_port_out_list.getConnectedPorts()  # type:list\n\n    # We delete the previous node before creating the new one\n    source_node.delete()\n    del source_node\n    Utils.EventModule.ProcessEvents()  # make sure the delete is processed\n\n    # Now create the new node\n    new_node = KatanaFile.Paste(katana_xml, parent_node)  # type: list\n    new_node = new_node[0]  # type: NodegraphAPI.Node\n    NodegraphAPI.SetNodePosition(new_node, sn_pos)\n    sn_port_in.connect(new_node.getInputPortByIndex(0))\n    for port in sn_port_out_list:\n        port.connect(new_node.getOutputPortByIndex(0))\n\n    NodegraphAPI.SetNodeEdited(new_node, True, exclusive=True)\n    print(\n        &quot;[ButtonScript][{}][update_node] Finished.\\n&quot;\n        &quot;Previous node was deleted and replace by the new node &lt;{}&gt;.&quot;\n        &quot;&quot;.format(logger, new_node)\n    )\n    return\n\n\ndef run():\n    &quot;&quot;&quot;\n    This function runs for all buttons.\n    &quot;&quot;&quot;\n\n    parameter = parameter  # type: NodegraphAPI.Parameter\n    node = node  # type: NodegraphAPI.Node\n\n    # ex: parameter.getName() = &quot;add_row_arbitrary&quot;\n    context = parameter.getName().rsplit(&quot;_&quot;, 1)[-1]\n    op = parameter.getName().rsplit(&quot;_&quot;, 1)[0]\n    name = &quot;KUIs.{}.{}&quot;.format(context, op)\n\n    data = get_data(node, &quot;user.{}.array&quot;.format(context))\n    param = data[&quot;param&quot;]\n    array_size = data[&quot;array&quot;]\n    tuple_size = data[&quot;tuple&quot;]\n\n    if op == &quot;add_row&quot;:\n\n        param.resizeArray(array_size + tuple_size)\n\n        if context == &quot;sources&quot;:\n            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE LOCATION&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(&quot;SOURCE INDEX&quot;, FRAME)\n\n        elif context == &quot;common&quot;:\n            tokenparam = node.getParameter(&quot;user.common.token2add&quot;)\n            tokenparam_value = tokenparam.getValue(FRAME)  # type: str\n            param.getChildByIndex(array_size + 0).setValue(&quot;ATTRIBUTE&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(tokenparam_value, FRAME)\n            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)\n            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)\n            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)\n\n        elif context == &quot;arbitrary&quot;:\n            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(&quot;TARGET&quot;, FRAME)\n            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)\n            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)\n            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)\n            param.getChildByIndex(array_size + 5).setValue(&quot;&quot;, FRAME)\n\n    elif op == &quot;remove_row&quot;:\n        param.resizeArray(array_size - tuple_size)\n\n    # this is executed no matter what button the user clicked\n    update_node(node, name)\n\n    print(&quot;[ScriptButton][{}][run] Finished.&quot;.format(name))\n    return\n\n\nrun()\n&apos;}" name="remove_row_sources" value=""/>
            <string_parameter expression="getParam(&apos;AttributeSet_sources_kuis0001.stringValue&apos;).param.getFullName()" hints="{&apos;widget&apos;: &apos;teleparam&apos;}" name="array"/>
          </group_parameter>
          <group_parameter hints="{&apos;label&apos;: &apos;#common&apos;}" name="common">
            <string_parameter hints="{&apos;widget&apos;: &apos;popup&apos;, &apos;options&apos;: [&apos;$points&apos;, &apos;$index&apos;, &apos;$skip&apos;, &apos;$hide&apos;, &apos;$matrix&apos;, &apos;$scale&apos;, &apos;$translation&apos;, &apos;$rotation&apos;, &apos;$rotationX&apos;, &apos;$rotationY&apos;, &apos;$rotationZ&apos;], &apos;label&apos;: &apos;Token to Add&apos;}" name="token2add" value="$scale"/>
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptButton&apos;, &apos;buttonText&apos;: &apos;Add New Row with Above Token&apos;, &apos;scriptText&apos;: &apos;&quot;&quot;&quot;\nversion=2\nPython 2+\n\nThis snippet is used on KUI Setup node ScriptButtons parameters.\nThe script is modulated based on the name of the parameter.\n&quot;&quot;&quot;\nfrom Katana import (\n    KatanaFile,\n    NodegraphAPI,\n    UI4,\n    Utils,\n)\n\nFRAME = NodegraphAPI.GetCurrentTime()\n\n\ndef get_data(sourcenode, path):\n\n    teleparam = sourcenode.getParameter(path)\n    teleparam_value = teleparam.getValue(FRAME)  # &quot;nodeName.paramName&quot;\n\n    asnode, asparam = teleparam_value.split(&quot;.&quot;, 1)\n    asnode = NodegraphAPI.GetNode(asnode)\n    asparam = asnode.getParameter(asparam)  # string array parameter\n\n    # get current parameter structure\n    array_size = asparam.getNumChildren()\n    tuple_size = asparam.getTupleSize()\n\n    return {\n        &quot;node&quot;: asnode,\n        &quot;param&quot;: asparam,\n        &quot;array&quot;: array_size,\n        &quot;tuple&quot;: tuple_size\n    }\n\n\ndef update_node(node2update, logger):\n    &quot;&quot;&quot;\n    Because I didn\&apos;t find any way to force an UI refresh of a node parameter\n    we will &quot;cut and paste&quot; the node to kind of force refresh it.\n    &quot;&quot;&quot;\n\n    # Get the original node and gather all the data we need for copy\n    NodegraphAPI.SetAllSelectedNodes([node2update])\n    source_node, parent_node = NodegraphAPI.GetAllSelectedNodesAndParent()\n    katana_xml = NodegraphAPI.BuildNodesXmlIO(\n        source_node,\n        forcePersistant=True\n    )\n    source_node = source_node[0]  # type: NodegraphAPI.Node\n    sn_pos = NodegraphAPI.GetNodePosition(source_node)  # type: tuple\n    sn_port_in = source_node.getInputPortByIndex(0)  # type: NodegraphAPI.Port\n    sn_port_in = sn_port_in.getConnectedPort(0)  # type: NodegraphAPI.Port\n    sn_port_out_list = source_node.getOutputPortByIndex(0)  # type: NodegraphAPI.Port\n    sn_port_out_list = sn_port_out_list.getConnectedPorts()  # type:list\n\n    # We delete the previous node before creating the new one\n    source_node.delete()\n    del source_node\n    Utils.EventModule.ProcessEvents()  # make sure the delete is processed\n\n    # Now create the new node\n    new_node = KatanaFile.Paste(katana_xml, parent_node)  # type: list\n    new_node = new_node[0]  # type: NodegraphAPI.Node\n    NodegraphAPI.SetNodePosition(new_node, sn_pos)\n    sn_port_in.connect(new_node.getInputPortByIndex(0))\n    for port in sn_port_out_list:\n        port.connect(new_node.getOutputPortByIndex(0))\n\n    NodegraphAPI.SetNodeEdited(new_node, True, exclusive=True)\n    print(\n        &quot;[ButtonScript][{}][update_node] Finished.\\n&quot;\n        &quot;Previous node was deleted and replace by the new node &lt;{}&gt;.&quot;\n        &quot;&quot;.format(logger, new_node)\n    )\n    return\n\n\ndef run():\n    &quot;&quot;&quot;\n    This function runs for all buttons.\n    &quot;&quot;&quot;\n\n    parameter = parameter  # type: NodegraphAPI.Parameter\n    node = node  # type: NodegraphAPI.Node\n\n    # ex: parameter.getName() = &quot;add_row_arbitrary&quot;\n    context = parameter.getName().rsplit(&quot;_&quot;, 1)[-1]\n    op = parameter.getName().rsplit(&quot;_&quot;, 1)[0]\n    name = &quot;KUIs.{}.{}&quot;.format(context, op)\n\n    data = get_data(node, &quot;user.{}.array&quot;.format(context))\n    param = data[&quot;param&quot;]\n    array_size = data[&quot;array&quot;]\n    tuple_size = data[&quot;tuple&quot;]\n\n    if op == &quot;add_row&quot;:\n\n        param.resizeArray(array_size + tuple_size)\n\n        if context == &quot;sources&quot;:\n            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE LOCATION&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(&quot;SOURCE INDEX&quot;, FRAME)\n\n        elif context == &quot;common&quot;:\n            tokenparam = node.getParameter(&quot;user.common.token2add&quot;)\n            tokenparam_value = tokenparam.getValue(FRAME)  # type: str\n            param.getChildByIndex(array_size + 0).setValue(&quot;ATTRIBUTE&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(tokenparam_value, FRAME)\n            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)\n            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)\n            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)\n\n        elif context == &quot;arbitrary&quot;:\n            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(&quot;TARGET&quot;, FRAME)\n            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)\n            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)\n            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)\n            param.getChildByIndex(array_size + 5).setValue(&quot;&quot;, FRAME)\n\n    elif op == &quot;remove_row&quot;:\n        param.resizeArray(array_size - tuple_size)\n\n    # this is executed no matter what button the user clicked\n    update_node(node, name)\n\n    print(&quot;[ScriptButton][{}][run] Finished.&quot;.format(name))\n    return\n\n\nrun()\n&apos;}" name="add_row_common" value=""/>
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptButton&apos;, &apos;buttonText&apos;: &apos;Remove Last Row&apos;, &apos;scriptText&apos;: &apos;&quot;&quot;&quot;\nversion=2\nPython 2+\n\nThis snippet is used on KUI Setup node ScriptButtons parameters.\nThe script is modulated based on the name of the parameter.\n&quot;&quot;&quot;\nfrom Katana import (\n    KatanaFile,\n    NodegraphAPI,\n    UI4,\n    Utils,\n)\n\nFRAME = NodegraphAPI.GetCurrentTime()\n\n\ndef get_data(sourcenode, path):\n\n    teleparam = sourcenode.getParameter(path)\n    teleparam_value = teleparam.getValue(FRAME)  # &quot;nodeName.paramName&quot;\n\n    asnode, asparam = teleparam_value.split(&quot;.&quot;, 1)\n    asnode = NodegraphAPI.GetNode(asnode)\n    asparam = asnode.getParameter(asparam)  # string array parameter\n\n    # get current parameter structure\n    array_size = asparam.getNumChildren()\n    tuple_size = asparam.getTupleSize()\n\n    return {\n        &quot;node&quot;: asnode,\n        &quot;param&quot;: asparam,\n        &quot;array&quot;: array_size,\n        &quot;tuple&quot;: tuple_size\n    }\n\n\ndef update_node(node2update, logger):\n    &quot;&quot;&quot;\n    Because I didn\&apos;t find any way to force an UI refresh of a node parameter\n    we will &quot;cut and paste&quot; the node to kind of force refresh it.\n    &quot;&quot;&quot;\n\n    # Get the original node and gather all the data we need for copy\n    NodegraphAPI.SetAllSelectedNodes([node2update])\n    source_node, parent_node = NodegraphAPI.GetAllSelectedNodesAndParent()\n    katana_xml = NodegraphAPI.BuildNodesXmlIO(\n        source_node,\n        forcePersistant=True\n    )\n    source_node = source_node[0]  # type: NodegraphAPI.Node\n    sn_pos = NodegraphAPI.GetNodePosition(source_node)  # type: tuple\n    sn_port_in = source_node.getInputPortByIndex(0)  # type: NodegraphAPI.Port\n    sn_port_in = sn_port_in.getConnectedPort(0)  # type: NodegraphAPI.Port\n    sn_port_out_list = source_node.getOutputPortByIndex(0)  # type: NodegraphAPI.Port\n    sn_port_out_list = sn_port_out_list.getConnectedPorts()  # type:list\n\n    # We delete the previous node before creating the new one\n    source_node.delete()\n    del source_node\n    Utils.EventModule.ProcessEvents()  # make sure the delete is processed\n\n    # Now create the new node\n    new_node = KatanaFile.Paste(katana_xml, parent_node)  # type: list\n    new_node = new_node[0]  # type: NodegraphAPI.Node\n    NodegraphAPI.SetNodePosition(new_node, sn_pos)\n    sn_port_in.connect(new_node.getInputPortByIndex(0))\n    for port in sn_port_out_list:\n        port.connect(new_node.getOutputPortByIndex(0))\n\n    NodegraphAPI.SetNodeEdited(new_node, True, exclusive=True)\n    print(\n        &quot;[ButtonScript][{}][update_node] Finished.\\n&quot;\n        &quot;Previous node was deleted and replace by the new node &lt;{}&gt;.&quot;\n        &quot;&quot;.format(logger, new_node)\n    )\n    return\n\n\ndef run():\n    &quot;&quot;&quot;\n    This function runs for all buttons.\n    &quot;&quot;&quot;\n\n    parameter = parameter  # type: NodegraphAPI.Parameter\n    node = node  # type: NodegraphAPI.Node\n\n    # ex: parameter.getName() = &quot;add_row_arbitrary&quot;\n    context = parameter.getName().rsplit(&quot;_&quot;, 1)[-1]\n    op = parameter.getName().rsplit(&quot;_&quot;, 1)[0]\n    name = &quot;KUIs.{}.{}&quot;.format(context, op)\n\n    data = get_data(node, &quot;user.{}.array&quot;.format(context))\n    param = data[&quot;param&quot;]\n    array_size = data[&quot;array&quot;]\n    tuple_size = data[&quot;tuple&quot;]\n\n    if op == &quot;add_row&quot;:\n\n        param.resizeArray(array_size + tuple_size)\n\n        if context == &quot;sources&quot;:\n            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE LOCATION&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(&quot;SOURCE INDEX&quot;, FRAME)\n\n        elif context == &quot;common&quot;:\n            tokenparam = node.getParameter(&quot;user.common.token2add&quot;)\n            tokenparam_value = tokenparam.getValue(FRAME)  # type: str\n            param.getChildByIndex(array_size + 0).setValue(&quot;ATTRIBUTE&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(tokenparam_value, FRAME)\n            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)\n            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)\n            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)\n\n        elif context == &quot;arbitrary&quot;:\n            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(&quot;TARGET&quot;, FRAME)\n            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)\n            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)\n            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)\n            param.getChildByIndex(array_size + 5).setValue(&quot;&quot;, FRAME)\n\n    elif op == &quot;remove_row&quot;:\n        param.resizeArray(array_size - tuple_size)\n\n    # this is executed no matter what button the user clicked\n    update_node(node, name)\n\n    print(&quot;[ScriptButton][{}][run] Finished.&quot;.format(name))\n    return\n\n\nrun()\n&apos;}" name="remove_row_common" value=""/>
            <string_parameter expression="getParam(&apos;AttributeSet_common_kuis0001.stringValue&apos;).param.getFullName()" hints="{&apos;widget&apos;: &apos;teleparam&apos;, &apos;help&apos;: &apos;[0*n] = attribute path relative to the source.&lt;br&gt;\n[1*n] = token to specify what kind of data [0] corresponds to.&lt;br&gt;\n[2*n] = value grouping : how much value belongs to an individual point.&lt;br&gt;\n[3*n] = value multiplier : quick way to multiply all values.&lt;br&gt;\n[4*n] = value add : quick way to offset all values by adding/subtracting a value.&lt;br&gt;\n&lt;br&gt;\nSupported tokens:\n\n&lt;ul&gt;\n&lt;li&gt;$points&lt;/li&gt;\n&lt;li&gt;$index&lt;/li&gt;\n&lt;li&gt;$skip&lt;/li&gt;\n&lt;li&gt;$hide&lt;/li&gt;\n&lt;li&gt;$matrix&lt;/li&gt;\n&lt;li&gt;$scale&lt;/li&gt;\n&lt;li&gt;$translation&lt;/li&gt;\n&lt;li&gt;$rotation&lt;/li&gt;\n&lt;li&gt;$rotationX&lt;/li&gt;\n&lt;li&gt;$rotationY&lt;/li&gt;\n&lt;li&gt;$rotationZ&lt;/li&gt;\n&lt;/ul&gt;&apos;}" name="array"/>
          </group_parameter>
          <group_parameter hints="{&apos;label&apos;: &apos;#arbitrary&apos;}" name="arbitrary">
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptButton&apos;, &apos;buttonText&apos;: &apos;Add New Row&apos;, &apos;scriptText&apos;: &apos;&quot;&quot;&quot;\nversion=2\nPython 2+\n\nThis snippet is used on KUI Setup node ScriptButtons parameters.\nThe script is modulated based on the name of the parameter.\n&quot;&quot;&quot;\nfrom Katana import (\n    KatanaFile,\n    NodegraphAPI,\n    UI4,\n    Utils,\n)\n\nFRAME = NodegraphAPI.GetCurrentTime()\n\n\ndef get_data(sourcenode, path):\n\n    teleparam = sourcenode.getParameter(path)\n    teleparam_value = teleparam.getValue(FRAME)  # &quot;nodeName.paramName&quot;\n\n    asnode, asparam = teleparam_value.split(&quot;.&quot;, 1)\n    asnode = NodegraphAPI.GetNode(asnode)\n    asparam = asnode.getParameter(asparam)  # string array parameter\n\n    # get current parameter structure\n    array_size = asparam.getNumChildren()\n    tuple_size = asparam.getTupleSize()\n\n    return {\n        &quot;node&quot;: asnode,\n        &quot;param&quot;: asparam,\n        &quot;array&quot;: array_size,\n        &quot;tuple&quot;: tuple_size\n    }\n\n\ndef update_node(node2update, logger):\n    &quot;&quot;&quot;\n    Because I didn\&apos;t find any way to force an UI refresh of a node parameter\n    we will &quot;cut and paste&quot; the node to kind of force refresh it.\n    &quot;&quot;&quot;\n\n    # Get the original node and gather all the data we need for copy\n    NodegraphAPI.SetAllSelectedNodes([node2update])\n    source_node, parent_node = NodegraphAPI.GetAllSelectedNodesAndParent()\n    katana_xml = NodegraphAPI.BuildNodesXmlIO(\n        source_node,\n        forcePersistant=True\n    )\n    source_node = source_node[0]  # type: NodegraphAPI.Node\n    sn_pos = NodegraphAPI.GetNodePosition(source_node)  # type: tuple\n    sn_port_in = source_node.getInputPortByIndex(0)  # type: NodegraphAPI.Port\n    sn_port_in = sn_port_in.getConnectedPort(0)  # type: NodegraphAPI.Port\n    sn_port_out_list = source_node.getOutputPortByIndex(0)  # type: NodegraphAPI.Port\n    sn_port_out_list = sn_port_out_list.getConnectedPorts()  # type:list\n\n    # We delete the previous node before creating the new one\n    source_node.delete()\n    del source_node\n    Utils.EventModule.ProcessEvents()  # make sure the delete is processed\n\n    # Now create the new node\n    new_node = KatanaFile.Paste(katana_xml, parent_node)  # type: list\n    new_node = new_node[0]  # type: NodegraphAPI.Node\n    NodegraphAPI.SetNodePosition(new_node, sn_pos)\n    sn_port_in.connect(new_node.getInputPortByIndex(0))\n    for port in sn_port_out_list:\n        port.connect(new_node.getOutputPortByIndex(0))\n\n    NodegraphAPI.SetNodeEdited(new_node, True, exclusive=True)\n    print(\n        &quot;[ButtonScript][{}][update_node] Finished.\\n&quot;\n        &quot;Previous node was deleted and replace by the new node &lt;{}&gt;.&quot;\n        &quot;&quot;.format(logger, new_node)\n    )\n    return\n\n\ndef run():\n    &quot;&quot;&quot;\n    This function runs for all buttons.\n    &quot;&quot;&quot;\n\n    parameter = parameter  # type: NodegraphAPI.Parameter\n    node = node  # type: NodegraphAPI.Node\n\n    # ex: parameter.getName() = &quot;add_row_arbitrary&quot;\n    context = parameter.getName().rsplit(&quot;_&quot;, 1)[-1]\n    op = parameter.getName().rsplit(&quot;_&quot;, 1)[0]\n    name = &quot;KUIs.{}.{}&quot;.format(context, op)\n\n    data = get_data(node, &quot;user.{}.array&quot;.format(context))\n    param = data[&quot;param&quot;]\n    array_size = data[&quot;array&quot;]\n    tuple_size = data[&quot;tuple&quot;]\n\n    if op == &quot;add_row&quot;:\n\n        param.resizeArray(array_size + tuple_size)\n\n        if context == &quot;sources&quot;:\n            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE LOCATION&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(&quot;SOURCE INDEX&quot;, FRAME)\n\n        elif context == &quot;common&quot;:\n            tokenparam = node.getParameter(&quot;user.common.token2add&quot;)\n            tokenparam_value = tokenparam.getValue(FRAME)  # type: str\n            param.getChildByIndex(array_size + 0).setValue(&quot;ATTRIBUTE&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(tokenparam_value, FRAME)\n            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)\n            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)\n            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)\n\n        elif context == &quot;arbitrary&quot;:\n            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(&quot;TARGET&quot;, FRAME)\n            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)\n            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)\n            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)\n            param.getChildByIndex(array_size + 5).setValue(&quot;&quot;, FRAME)\n\n    elif op == &quot;remove_row&quot;:\n        param.resizeArray(array_size - tuple_size)\n\n    # this is executed no matter what button the user clicked\n    update_node(node, name)\n\n    print(&quot;[ScriptButton][{}][run] Finished.&quot;.format(name))\n    return\n\n\nrun()\n&apos;}" name="add_row_arbitrary" value=""/>
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptButton&apos;, &apos;buttonText&apos;: &apos;Remove Last Row&apos;, &apos;scriptText&apos;: &apos;&quot;&quot;&quot;\nversion=2\nPython 2+\n\nThis snippet is used on KUI Setup node ScriptButtons parameters.\nThe script is modulated based on the name of the parameter.\n&quot;&quot;&quot;\nfrom Katana import (\n    KatanaFile,\n    NodegraphAPI,\n    UI4,\n    Utils,\n)\n\nFRAME = NodegraphAPI.GetCurrentTime()\n\n\ndef get_data(sourcenode, path):\n\n    teleparam = sourcenode.getParameter(path)\n    teleparam_value = teleparam.getValue(FRAME)  # &quot;nodeName.paramName&quot;\n\n    asnode, asparam = teleparam_value.split(&quot;.&quot;, 1)\n    asnode = NodegraphAPI.GetNode(asnode)\n    asparam = asnode.getParameter(asparam)  # string array parameter\n\n    # get current parameter structure\n    array_size = asparam.getNumChildren()\n    tuple_size = asparam.getTupleSize()\n\n    return {\n        &quot;node&quot;: asnode,\n        &quot;param&quot;: asparam,\n        &quot;array&quot;: array_size,\n        &quot;tuple&quot;: tuple_size\n    }\n\n\ndef update_node(node2update, logger):\n    &quot;&quot;&quot;\n    Because I didn\&apos;t find any way to force an UI refresh of a node parameter\n    we will &quot;cut and paste&quot; the node to kind of force refresh it.\n    &quot;&quot;&quot;\n\n    # Get the original node and gather all the data we need for copy\n    NodegraphAPI.SetAllSelectedNodes([node2update])\n    source_node, parent_node = NodegraphAPI.GetAllSelectedNodesAndParent()\n    katana_xml = NodegraphAPI.BuildNodesXmlIO(\n        source_node,\n        forcePersistant=True\n    )\n    source_node = source_node[0]  # type: NodegraphAPI.Node\n    sn_pos = NodegraphAPI.GetNodePosition(source_node)  # type: tuple\n    sn_port_in = source_node.getInputPortByIndex(0)  # type: NodegraphAPI.Port\n    sn_port_in = sn_port_in.getConnectedPort(0)  # type: NodegraphAPI.Port\n    sn_port_out_list = source_node.getOutputPortByIndex(0)  # type: NodegraphAPI.Port\n    sn_port_out_list = sn_port_out_list.getConnectedPorts()  # type:list\n\n    # We delete the previous node before creating the new one\n    source_node.delete()\n    del source_node\n    Utils.EventModule.ProcessEvents()  # make sure the delete is processed\n\n    # Now create the new node\n    new_node = KatanaFile.Paste(katana_xml, parent_node)  # type: list\n    new_node = new_node[0]  # type: NodegraphAPI.Node\n    NodegraphAPI.SetNodePosition(new_node, sn_pos)\n    sn_port_in.connect(new_node.getInputPortByIndex(0))\n    for port in sn_port_out_list:\n        port.connect(new_node.getOutputPortByIndex(0))\n\n    NodegraphAPI.SetNodeEdited(new_node, True, exclusive=True)\n    print(\n        &quot;[ButtonScript][{}][update_node] Finished.\\n&quot;\n        &quot;Previous node was deleted and replace by the new node &lt;{}&gt;.&quot;\n        &quot;&quot;.format(logger, new_node)\n    )\n    return\n\n\ndef run():\n    &quot;&quot;&quot;\n    This function runs for all buttons.\n    &quot;&quot;&quot;\n\n    parameter = parameter  # type: NodegraphAPI.Parameter\n    node = node  # type: NodegraphAPI.Node\n\n    # ex: parameter.getName() = &quot;add_row_arbitrary&quot;\n    context = parameter.getName().rsplit(&quot;_&quot;, 1)[-1]\n    op = parameter.getName().rsplit(&quot;_&quot;, 1)[0]\n    name = &quot;KUIs.{}.{}&quot;.format(context, op)\n\n    data = get_data(node, &quot;user.{}.array&quot;.format(context))\n    param = data[&quot;param&quot;]\n    array_size = data[&quot;array&quot;]\n    tuple_size = data[&quot;tuple&quot;]\n\n    if op == &quot;add_row&quot;:\n\n        param.resizeArray(array_size + tuple_size)\n\n        if context == &quot;sources&quot;:\n            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE LOCATION&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(&quot;SOURCE INDEX&quot;, FRAME)\n\n        elif context == &quot;common&quot;:\n            tokenparam = node.getParameter(&quot;user.common.token2add&quot;)\n            tokenparam_value = tokenparam.getValue(FRAME)  # type: str\n            param.getChildByIndex(array_size + 0).setValue(&quot;ATTRIBUTE&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(tokenparam_value, FRAME)\n            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)\n            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)\n            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)\n\n        elif context == &quot;arbitrary&quot;:\n            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE&quot;, FRAME)\n            param.getChildByIndex(array_size + 1).setValue(&quot;TARGET&quot;, FRAME)\n            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)\n            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)\n            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)\n            param.getChildByIndex(array_size + 5).setValue(&quot;&quot;, FRAME)\n\n    elif op == &quot;remove_row&quot;:\n        param.resizeArray(array_size - tuple_size)\n\n    # this is executed no matter what button the user clicked\n    update_node(node, name)\n\n    print(&quot;[ScriptButton][{}][run] Finished.&quot;.format(name))\n    return\n\n\nrun()\n&apos;}" name="remove_row_arbitrary" value=""/>
            <string_parameter expression="getParam(&apos;AttributeSet_arbitrary_kuis0001.stringValue&apos;).param.getFullName()" hints="{&apos;widget&apos;: &apos;teleparam&apos;, &apos;help&apos;: &apos;[0*n] = attribute path relative to the source.&lt;br&gt;\n[1*n] = target attribute path relative to the instance.&lt;br&gt;\n[2*n] = value grouping : how much value belongs to an individual point.&lt;br&gt;\n[3*n] = value multiplier : quick way to multiply values.&lt;br&gt;\n[4*n] = value add : quick way to offset all values by adding/subtracting a value.&lt;br&gt;\n[5*n] = (optional) additional attributes that must be created on instance. Must be a valid Lua table.&lt;br&gt;\n&lt;br&gt;\n\n[5*n] : A Lua-formatted table that describe how additional attributes must be created :&lt;br&gt;\n&lt;div style=&quot;background-color:rgba(0,0,0,0.3);&quot;&gt;\n&lt;tt&gt;\n{&lt;br&gt;\n&amp;nbsp;&amp;nbsp;[&quot;geometry.arbitrary.randomColor.inputType&quot;]=StringAttribute(&quot;color3&quot;),&lt;br&gt;\n&amp;nbsp;&amp;nbsp;[&quot;geometry.arbitrary.randomColor.scope&quot;]=StringAttribute(&quot;primitive&quot;),&lt;br&gt;\n}\n&lt;/tt&gt;\n&lt;/div&gt;&apos;}" name="array"/>
          </group_parameter>
          <group_parameter name="about">
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptButton&apos;, &apos;buttonText&apos;: &apos;Open Documentation&apos;, &apos;scriptText&apos;: &apos;import webbrowser\nwebbrowser.open(&quot;https://github.com/MrLixm/KUI&quot;)&apos;}" name="open_documentation" value=""/>
            <number_parameter name="version_" value="3"/>
            <string_parameter name="author_" value="Liam Collod"/>
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptEditor&apos;}" name="info_" value="Node part of KUI setup.&#0010;Configure attributes on the source (point-cloud) ofr the Instancer to pick-up."/>
          </group_parameter>
          <group_parameter hints="{&apos;label&apos;: &apos;&apos;}" name="data">
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptButton&apos;, &apos;buttonText&apos;: &apos;Copy Code to Buttons&apos;, &apos;scriptText&apos;: &apos;&quot;&quot;&quot;\nversion=3\nPython 2+\n\nThis snippet is used on KUI Setup node.\n&quot;&quot;&quot;\nfrom ast import literal_eval\n\nFRAME = NodegraphAPI.GetCurrentTime()\n\n\ncode = node.getParameter(&quot;user.data.btn_code&quot;).getValue(FRAME)\n\nbtn_list = list()\nloclist = [&quot;sources&quot;, &quot;common&quot;, &quot;arbitrary&quot;]\nfor loc in loclist:\n    btn_list.append(&quot;user.{0}.add_row_{0}&quot;.format(loc))\n    btn_list.append(&quot;user.{0}.remove_row_{0}&quot;.format(loc))\ndel loclist\n\nfor btn in btn_list:\n    btn = node.getParameter(btn)\n    hint = literal_eval(btn.getHintString())  # type: dict\n    hint[&quot;scriptText&quot;] = code\n    btn.setHintString(repr(hint))\n\n    print(\n        &quot;[ScriptButton][copy2button] Code on button &lt;{}&gt; replaced.&quot;\n        &quot;&quot;.format(btn.getName())\n    )\n    continue&apos;}" name="copy2buttons" value=""/>
            <string_parameter hints="{&apos;widget&apos;: &apos;scriptEditor&apos;}" name="btn_code" value="&quot;&quot;&quot;&#0010;version=2&#0010;Python 2+&#0010;&#0010;This snippet is used on KUI Setup node ScriptButtons parameters.&#0010;The script is modulated based on the name of the parameter.&#0010;&quot;&quot;&quot;&#0010;from Katana import (&#0010;    KatanaFile,&#0010;    NodegraphAPI,&#0010;    UI4,&#0010;    Utils,&#0010;)&#0010;&#0010;FRAME = NodegraphAPI.GetCurrentTime()&#0010;&#0010;&#0010;def get_data(sourcenode, path):&#0010;&#0010;    teleparam = sourcenode.getParameter(path)&#0010;    teleparam_value = teleparam.getValue(FRAME)  # &quot;nodeName.paramName&quot;&#0010;&#0010;    asnode, asparam = teleparam_value.split(&quot;.&quot;, 1)&#0010;    asnode = NodegraphAPI.GetNode(asnode)&#0010;    asparam = asnode.getParameter(asparam)  # string array parameter&#0010;&#0010;    # get current parameter structure&#0010;    array_size = asparam.getNumChildren()&#0010;    tuple_size = asparam.getTupleSize()&#0010;&#0010;    return {&#0010;        &quot;node&quot;: asnode,&#0010;        &quot;param&quot;: asparam,&#0010;        &quot;array&quot;: array_size,&#0010;        &quot;tuple&quot;: tuple_size&#0010;    }&#0010;&#0010;&#0010;def update_node(node2update, logger):&#0010;    &quot;&quot;&quot;&#0010;    Because I didn&apos;t find any way to force an UI refresh of a node parameter&#0010;    we will &quot;cut and paste&quot; the node to kind of force refresh it.&#0010;    &quot;&quot;&quot;&#0010;&#0010;    # Get the original node and gather all the data we need for copy&#0010;    NodegraphAPI.SetAllSelectedNodes([node2update])&#0010;    source_node, parent_node = NodegraphAPI.GetAllSelectedNodesAndParent()&#0010;    katana_xml = NodegraphAPI.BuildNodesXmlIO(&#0010;        source_node,&#0010;        forcePersistant=True&#0010;    )&#0010;    source_node = source_node[0]  # type: NodegraphAPI.Node&#0010;    sn_pos = NodegraphAPI.GetNodePosition(source_node)  # type: tuple&#0010;    sn_port_in = source_node.getInputPortByIndex(0)  # type: NodegraphAPI.Port&#0010;    sn_port_in = sn_port_in.getConnectedPort(0)  # type: NodegraphAPI.Port&#0010;    sn_port_out_list = source_node.getOutputPortByIndex(0)  # type: NodegraphAPI.Port&#0010;    sn_port_out_list = sn_port_out_list.getConnectedPorts()  # type:list&#0010;&#0010;    # We delete the previous node before creating the new one&#0010;    source_node.delete()&#0010;    del source_node&#0010;    Utils.EventModule.ProcessEvents()  # make sure the delete is processed&#0010;&#0010;    # Now create the new node&#0010;    new_node = KatanaFile.Paste(katana_xml, parent_node)  # type: list&#0010;    new_node = new_node[0]  # type: NodegraphAPI.Node&#0010;    NodegraphAPI.SetNodePosition(new_node, sn_pos)&#0010;    sn_port_in.connect(new_node.getInputPortByIndex(0))&#0010;    for port in sn_port_out_list:&#0010;        port.connect(new_node.getOutputPortByIndex(0))&#0010;&#0010;    NodegraphAPI.SetNodeEdited(new_node, True, exclusive=True)&#0010;    print(&#0010;        &quot;[ButtonScript][{}][update_node] Finished.\n&quot;&#0010;        &quot;Previous node was deleted and replace by the new node &lt;{}&gt;.&quot;&#0010;        &quot;&quot;.format(logger, new_node)&#0010;    )&#0010;    return&#0010;&#0010;&#0010;def run():&#0010;    &quot;&quot;&quot;&#0010;    This function runs for all buttons.&#0010;    &quot;&quot;&quot;&#0010;&#0010;    parameter = parameter  # type: NodegraphAPI.Parameter&#0010;    node = node  # type: NodegraphAPI.Node&#0010;&#0010;    # ex: parameter.getName() = &quot;add_row_arbitrary&quot;&#0010;    context = parameter.getName().rsplit(&quot;_&quot;, 1)[-1]&#0010;    op = parameter.getName().rsplit(&quot;_&quot;, 1)[0]&#0010;    name = &quot;KUIs.{}.{}&quot;.format(context, op)&#0010;&#0010;    data = get_data(node, &quot;user.{}.array&quot;.format(context))&#0010;    param = data[&quot;param&quot;]&#0010;    array_size = data[&quot;array&quot;]&#0010;    tuple_size = data[&quot;tuple&quot;]&#0010;&#0010;    if op == &quot;add_row&quot;:&#0010;&#0010;        param.resizeArray(array_size + tuple_size)&#0010;&#0010;        if context == &quot;sources&quot;:&#0010;            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE LOCATION&quot;, FRAME)&#0010;            param.getChildByIndex(array_size + 1).setValue(&quot;SOURCE INDEX&quot;, FRAME)&#0010;&#0010;        elif context == &quot;common&quot;:&#0010;            tokenparam = node.getParameter(&quot;user.common.token2add&quot;)&#0010;            tokenparam_value = tokenparam.getValue(FRAME)  # type: str&#0010;            param.getChildByIndex(array_size + 0).setValue(&quot;ATTRIBUTE&quot;, FRAME)&#0010;            param.getChildByIndex(array_size + 1).setValue(tokenparam_value, FRAME)&#0010;            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)&#0010;            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)&#0010;            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)&#0010;&#0010;        elif context == &quot;arbitrary&quot;:&#0010;            param.getChildByIndex(array_size + 0).setValue(&quot;SOURCE&quot;, FRAME)&#0010;            param.getChildByIndex(array_size + 1).setValue(&quot;TARGET&quot;, FRAME)&#0010;            param.getChildByIndex(array_size + 2).setValue(&quot;GROUPING&quot;, FRAME)&#0010;            param.getChildByIndex(array_size + 3).setValue(&quot;1&quot;, FRAME)&#0010;            param.getChildByIndex(array_size + 4).setValue(&quot;0&quot;, FRAME)&#0010;            param.getChildByIndex(array_size + 5).setValue(&quot;&quot;, FRAME)&#0010;&#0010;    elif op == &quot;remove_row&quot;:&#0010;        param.resizeArray(array_size - tuple_size)&#0010;&#0010;    # this is executed no matter what button the user clicked&#0010;    update_node(node, name)&#0010;&#0010;    print(&quot;[ScriptButton][{}][run] Finished.&quot;.format(name))&#0010;    return&#0010;&#0010;&#0010;run()&#0010;"/>
          </group_parameter>
        </group_parameter>
      </group_parameter>
      <node baseType="OpScript" name="OpScript_pcloud_width_kuis0001" ns_errorGlow="0.0" ns_viewState="2.0" type="OpScript" x="-1440.0" y="976.0">
        <port name="i0" source="in_kuis0001.output" type="in"/>
        <port name="out" type="out"/>
        <group_parameter name="OpScript_pcloud_width_kuis0001">
          <string_parameter name="CEL" value="(( /root/world/geo/asset/pointcloud/instancingDemo_pointcloud/instancingDemo_pointcloudShape))"/>
          <string_parameter expression="=^/user.pointcloud" name="location"/>
          <group_parameter name="script">
            <string_parameter name="lua" value="--[[&#0010;VERSION = 0.0.5&#0010;&#0010;OpScript for Foundry&apos;s Katana software.&#0010;&#0010;Add a geometry.point.width attribute to control the viewer&apos;s size of the points.&#0010;&#0010;Author: Liam Collod&#0010;Last Modified: 18/10/2021&#0010;&#0010;[OpScript setup]&#0010;- OpArg(type)(default_value):&#0010;    user.point_size(float)(15): size of the points in the viewer&#0010;- parameters:&#0010;    location: pointcloud scene graph location&#0010;    applyWhere: at specific location&#0010;&#0010;]]&#0010;&#0010;&#0010;&#0010;function run()&#0010;&#0010;  -- check the attribute doesn&apos;t already exists&#0010;  if Interface.GetAttr(&quot;geometry.point.width&quot;) then&#0010;    return&#0010;  end&#0010;&#0010;  -- get OpArg&#0010;  local point_scale = Interface.GetOpArg(&quot;user.point_size&quot;)&#0010;  if not point_scale then&#0010;    point_scale = 15.0&#0010;  else&#0010;    point_scale = point_scale:getValue()&#0010;  end&#0010;&#0010;  local points = Interface.GetAttr(&quot;geometry.point.P&quot;):getNearestSample(Interface.GetCurrentTime())&#0010;&#0010;  local point_scales = {}&#0010;  for i=1, #points do&#0010;    point_scales[i] = point_scale&#0010;  end&#0010;&#0010;  Interface.SetAttr(&quot;geometry.point.width&quot;, FloatAttribute(point_scales, 3))&#0010;  return&#0010;&#0010;end&#0010;&#0010;run()"/>
          </group_parameter>
          <string_parameter name="executionMode" value="immediate"/>
          <string_parameter name="applyWhere" value="at specific location"/>
          <string_parameter name="applyWhen" value="during op resolve"/>
          <string_parameter name="modifierNameMode" value="node name"/>
          <string_parameter name="modifierName" value="modifier"/>
          <string_parameter name="resolveIds" value=""/>
          <number_parameter name="recursiveEnable" value="0"/>
          <string_parameter name="disableAt" value=""/>
          <string_parameter name="inputBehavior" value="by index"/>
          <number_parameter name="multisampleUserOpArgs" value="0"/>
          <group_parameter hints="{&apos;widget&apos;: &apos;userParamsEditor&apos;}" name="user">
            <number_parameter expression="=^/user.display.point_width" isexpression="true" name="point_size"/>
          </group_parameter>
        </group_parameter>
      </node>
      <node baseType="GenericAssign" name="VisibilityAssign_kuis0001" ns_errorGlow="0.0" ns_viewState="2.0" type="VisibilityAssign" x="-1440.0" y="928.0">
        <port name="input" source="OpScript_pcloud_width_kuis0001.out" type="in"/>
        <port name="out" type="out"/>
        <group_parameter name="VisibilityAssign_kuis0001">
          <string_parameter expression="=^/user.pointcloud" name="CEL"/>
          <string_parameter name="location" value=""/>
          <group_parameter name="args">
            <group_parameter name="visible">
              <number_parameter name="enable" value="1"/>
              <number_parameter expression="=^/user.display.visible_in_render" isexpression="true" name="value"/>
              <number_parameter name="default" value="1"/>
              <string_parameter name="type" value="IntAttr"/>
            </group_parameter>
          </group_parameter>
        </group_parameter>
      </node>
      <node baseType="Dot" name="in_kuis0001" ns_basicDisplay="1.0" ns_colorb="0.01" ns_colorg="0.01" ns_colorr="0.01" ns_viewState="2.0" type="Dot" x="-1440.0" y="1104.0">
        <port name="input" source="KUISetup_0001.i0" type="in"/>
        <port name="output" type="out"/>
        <group_parameter name="in_kuis0001"/>
      </node>
      <node baseType="Dot" name="out_kuis0001" ns_basicDisplay="1.0" ns_colorb="0.01" ns_colorg="0.01" ns_colorr="0.01" ns_viewState="2.0" type="Dot" x="-1440.0" y="368.0">
        <port name="input" source="AttributeSet_settings_matrix_kuis0001.out" type="in"/>
        <port name="output" returns="o0" type="out"/>
        <group_parameter name="out_kuis0001"/>
      </node>
      <node baseType="AttributeSet" name="AttributeSet_arbitrary_kuis0001" ns_errorGlow="0.0" ns_viewState="2.0" type="AttributeSet" x="-1440.0" y="704.0">
        <port name="A" source="AttributeSet_common_kuis0001.out" type="in"/>
        <port name="out" type="out"/>
        <group_parameter name="AttributeSet_arbitrary_kuis0001">
          <string_parameter name="mode" value="paths"/>
          <string_parameter name="celSelection" value=""/>
          <stringarray_parameter name="paths" size="1" tupleSize="1">
            <string_parameter expression="=^/user.pointcloud" name="i0"/>
          </stringarray_parameter>
          <string_parameter name="action" value="Create/Override"/>
          <string_parameter name="attributeName" value="instancing.data.arbitrary"/>
          <string_parameter name="attributeType" value="string"/>
          <string_parameter name="groupInherit" value="Yes"/>
          <string_parameter name="multisample" value="No"/>
          <numberarray_parameter name="numberValue" size="3" tupleSize="1">
            <number_parameter name="i0" value="0"/>
            <number_parameter name="i1" value="0"/>
            <number_parameter name="i2" value="0"/>
          </numberarray_parameter>
          <stringarray_parameter name="stringValue" size="6" tupleSize="6">
            <string_parameter name="i0" value="geometry.arbitrary.randomColor.value"/>
            <string_parameter name="i1" value="instance.arbitrary.randomColor.value"/>
            <string_parameter name="i2" value="3"/>
            <string_parameter name="i3" value="1"/>
            <string_parameter name="i4" value="0"/>
            <string_parameter name="i5" value="{&#0010;    [&quot;geometry.arbitrary.randomColor.inputType&quot;]=StringAttribute(&quot;color3&quot;),&#0010;    [&quot;geometry.arbitrary.randomColor.scope&quot;]=StringAttribute(&quot;primitive&quot;),&#0010;}"/>
          </stringarray_parameter>
          <group_parameter name="groupValue"/>
        </group_parameter>
      </node>
      <node baseType="AttributeSet" name="AttributeSet_sources_kuis0001" ns_errorGlow="0.0" ns_viewState="2.0" type="AttributeSet" x="-1440.0" y="800.0">
        <port name="A" source="VisibilityAssign_kuis0001.out" type="in"/>
        <port name="out" type="out"/>
        <group_parameter name="AttributeSet_sources_kuis0001">
          <string_parameter name="mode" value="paths"/>
          <string_parameter name="celSelection" value=""/>
          <stringarray_parameter name="paths" size="1" tupleSize="1">
            <string_parameter expression="=^/user.pointcloud" name="i0"/>
          </stringarray_parameter>
          <string_parameter name="action" value="Create/Override"/>
          <string_parameter name="attributeName" value="instancing.data.sources"/>
          <string_parameter name="attributeType" value="string"/>
          <string_parameter name="groupInherit" value="Yes"/>
          <string_parameter name="multisample" value="No"/>
          <numberarray_parameter name="numberValue" size="3" tupleSize="1">
            <number_parameter name="i0" value="0"/>
            <number_parameter name="i1" value="0"/>
            <number_parameter name="i2" value="0"/>
          </numberarray_parameter>
          <stringarray_parameter name="stringValue" size="6" tupleSize="2">
            <string_parameter name="i0" value="/root/world/geo/asset/sources/sphere"/>
            <string_parameter name="i1" value="2"/>
            <string_parameter name="i2" value="/root/world/geo/asset/sources/cone"/>
            <string_parameter name="i3" value="1"/>
            <string_parameter name="i4" value="/root/world/geo/asset/sources/cube"/>
            <string_parameter name="i5" value="0"/>
          </stringarray_parameter>
          <group_parameter name="groupValue"/>
        </group_parameter>
      </node>
      <node baseType="AttributeSet" name="AttributeSet_settings_degree2radian_kuis0001" ns_errorGlow="0.0" ns_viewState="2.0" type="AttributeSet" x="-1440.0" y="592.0">
        <port name="A" source="AttributeSet_arbitrary_kuis0001.out" type="in"/>
        <port name="out" type="out"/>
        <group_parameter name="AttributeSet_settings_degree2radian_kuis0001">
          <string_parameter name="mode" value="paths"/>
          <string_parameter name="celSelection" value=""/>
          <stringarray_parameter name="paths" size="1" tupleSize="1">
            <string_parameter expression="=^/user.pointcloud" name="i0"/>
          </stringarray_parameter>
          <string_parameter name="action" value="Create/Override"/>
          <string_parameter name="attributeName" value="instancing.settings.convert_degree_to_radian"/>
          <string_parameter name="attributeType" value="integer"/>
          <string_parameter name="groupInherit" value="Yes"/>
          <string_parameter name="multisample" value="No"/>
          <numberarray_parameter name="numberValue" size="1" tupleSize="1">
            <number_parameter expression="=^/user.settings.convert_degree_to_radian" isexpression="true" name="i0"/>
          </numberarray_parameter>
          <stringarray_parameter name="stringValue" size="30" tupleSize="5">
            <string_parameter name="i0" value="geometry.arbitrary.scale.value"/>
            <string_parameter name="i1" value="$scale"/>
            <string_parameter name="i2" value="3"/>
            <string_parameter name="i3" value="1"/>
            <string_parameter name="i4" value="0"/>
            <string_parameter name="i5" value="geometry.arbitrary.rotation.value"/>
            <string_parameter name="i6" value="$rotation"/>
            <string_parameter name="i7" value="3"/>
            <string_parameter name="i8" value="1"/>
            <string_parameter name="i9" value="0"/>
            <string_parameter name="i10" value="geometry.point.P"/>
            <string_parameter name="i11" value="$points"/>
            <string_parameter name="i12" value="3"/>
            <string_parameter name="i13" value="1"/>
            <string_parameter name="i14" value="0"/>
            <string_parameter name="i15" value="geometry.arbitrary.objectIndex.value"/>
            <string_parameter name="i16" value="$index"/>
            <string_parameter name="i17" value="3"/>
            <string_parameter name="i18" value="1"/>
            <string_parameter name="i19" value="0"/>
            <string_parameter name="i20" value="geometry.point.P"/>
            <string_parameter name="i21" value="$translation"/>
            <string_parameter name="i22" value="3"/>
            <string_parameter name="i23" value="1"/>
            <string_parameter name="i24" value="0"/>
            <string_parameter name="i25" value="geometry.arbitrary.skipIndex"/>
            <string_parameter name="i26" value="$skip"/>
            <string_parameter name="i27" value="1"/>
            <string_parameter name="i28" value="1"/>
            <string_parameter name="i29" value="0"/>
          </stringarray_parameter>
          <group_parameter name="groupValue"/>
        </group_parameter>
      </node>
      <node baseType="AttributeSet" name="AttributeSet_settings_matrix_kuis0001" ns_errorGlow="0.0" ns_viewState="2.0" type="AttributeSet" x="-1440.0" y="544.0">
        <port name="A" source="AttributeSet_settings_degree2radian_kuis0001.out" type="in"/>
        <port name="out" type="out"/>
        <group_parameter name="AttributeSet_settings_matrix_kuis0001">
          <string_parameter name="mode" value="paths"/>
          <string_parameter name="celSelection" value=""/>
          <stringarray_parameter name="paths" size="1" tupleSize="1">
            <string_parameter expression="=^/user.pointcloud" name="i0"/>
          </stringarray_parameter>
          <string_parameter name="action" value="Create/Override"/>
          <string_parameter name="attributeName" value="instancing.settings.convert_trs_to_matrix"/>
          <string_parameter name="attributeType" value="integer"/>
          <string_parameter name="groupInherit" value="Yes"/>
          <string_parameter name="multisample" value="No"/>
          <numberarray_parameter name="numberValue" size="1" tupleSize="1">
            <number_parameter expression="=^/user.settings.convert_trs_to_matrix" isexpression="true" name="i0"/>
          </numberarray_parameter>
          <stringarray_parameter name="stringValue" size="30" tupleSize="5">
            <string_parameter name="i0" value="geometry.arbitrary.scale.value"/>
            <string_parameter name="i1" value="$scale"/>
            <string_parameter name="i2" value="3"/>
            <string_parameter name="i3" value="1"/>
            <string_parameter name="i4" value="0"/>
            <string_parameter name="i5" value="geometry.arbitrary.rotation.value"/>
            <string_parameter name="i6" value="$rotation"/>
            <string_parameter name="i7" value="3"/>
            <string_parameter name="i8" value="1"/>
            <string_parameter name="i9" value="0"/>
            <string_parameter name="i10" value="geometry.point.P"/>
            <string_parameter name="i11" value="$points"/>
            <string_parameter name="i12" value="3"/>
            <string_parameter name="i13" value="1"/>
            <string_parameter name="i14" value="0"/>
            <string_parameter name="i15" value="geometry.arbitrary.objectIndex.value"/>
            <string_parameter name="i16" value="$index"/>
            <string_parameter name="i17" value="3"/>
            <string_parameter name="i18" value="1"/>
            <string_parameter name="i19" value="0"/>
            <string_parameter name="i20" value="geometry.point.P"/>
            <string_parameter name="i21" value="$translation"/>
            <string_parameter name="i22" value="3"/>
            <string_parameter name="i23" value="1"/>
            <string_parameter name="i24" value="0"/>
            <string_parameter name="i25" value="geometry.arbitrary.skipIndex"/>
            <string_parameter name="i26" value="$skip"/>
            <string_parameter name="i27" value="1"/>
            <string_parameter name="i28" value="1"/>
            <string_parameter name="i29" value="0"/>
          </stringarray_parameter>
          <group_parameter name="groupValue"/>
        </group_parameter>
      </node>
      <node baseType="AttributeSet" name="AttributeSet_common_kuis0001" ns_errorGlow="0.0" ns_viewState="2.0" type="AttributeSet" x="-1440.0" y="752.0">
        <port name="A" source="AttributeSet_sources_kuis0001.out" type="in"/>
        <port name="out" type="out"/>
        <group_parameter name="AttributeSet_common_kuis0001">
          <string_parameter name="mode" value="paths"/>
          <string_parameter name="celSelection" value=""/>
          <stringarray_parameter name="paths" size="1" tupleSize="1">
            <string_parameter expression="=^/user.pointcloud" name="i0"/>
          </stringarray_parameter>
          <string_parameter name="action" value="Create/Override"/>
          <string_parameter name="attributeName" value="instancing.data.common"/>
          <string_parameter name="attributeType" value="string"/>
          <string_parameter name="groupInherit" value="Yes"/>
          <string_parameter name="multisample" value="No"/>
          <numberarray_parameter name="numberValue" size="3" tupleSize="1">
            <number_parameter name="i0" value="0"/>
            <number_parameter name="i1" value="0"/>
            <number_parameter name="i2" value="0"/>
          </numberarray_parameter>
          <stringarray_parameter name="stringValue" size="20" tupleSize="5">
            <string_parameter name="i0" value="geometry.arbitrary.scale.value"/>
            <string_parameter name="i1" value="$scale"/>
            <string_parameter name="i2" value="3"/>
            <string_parameter name="i3" value="1"/>
            <string_parameter name="i4" value="0"/>
            <string_parameter name="i5" value="geometry.arbitrary.rotation.value"/>
            <string_parameter name="i6" value="$rotation"/>
            <string_parameter name="i7" value="3"/>
            <string_parameter name="i8" value="1"/>
            <string_parameter name="i9" value="0"/>
            <string_parameter name="i10" value="geometry.point.P"/>
            <string_parameter name="i11" value="$points"/>
            <string_parameter name="i12" value="3"/>
            <string_parameter name="i13" value="1"/>
            <string_parameter name="i14" value="0"/>
            <string_parameter name="i15" value="geometry.arbitrary.objectIndex.value"/>
            <string_parameter name="i16" value="$index"/>
            <string_parameter name="i17" value="3"/>
            <string_parameter name="i18" value="1"/>
            <string_parameter name="i19" value="0"/>
          </stringarray_parameter>
          <group_parameter name="groupValue"/>
        </group_parameter>
      </node>
    </node>
  </node>
</katana>
